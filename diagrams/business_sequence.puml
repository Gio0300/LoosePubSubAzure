@startuml
skinparam ParticipantFontSize 14
skinparam ParticipantFontColor #White
title Order Created Event - Functional Sequence Diagram
participant ClientApp as "<b>Client App" #SlateGray
participant Producer as "<b>Producer\n<i><<Order Service>>" #RoyalBlue
participant EventStore as "<b>Event Store\n<i><<Produer Outbox>>" #DarkCyan
participant Publisher as "<b>Publisher" #DarkSlateBlue
participant MessageBus as "<b>Message Bus" #Darkorange
participant Subscriber as "<b>Subscriber" #DarkSlateBlue
participant BillingInbox as "<b>Consumer Inbox\n<i><<Billing Inbox>>" #DarkCyan
participant BillingService as "<b>Consumer\n<i><<Billing Service>>" #RoyalBlue

autonumber
activate ClientApp #Lime
ClientApp -> Producer : Submit <b>create_order</b> command

activate Producer #Lime
Producer -> EventStore : Append <b>order_created</b> event

activate EventStore #Lime
EventStore --> Producer : Return success

deactivate EventStore
Producer --> ClientApp : Return success

deactivate Producer
deactivate ClientApp

EventStore <- Publisher : Read database log\n(<i>Change Data Capture</i>)
activate EventStore #Lime

activate Publisher #Lime
Publisher -> MessageBus : Publish <b>order_created</b> event

activate MessageBus #Lime
MessageBus --> Publisher : Return success
deactivate MessageBus

Publisher -> EventStore : CDC check-point
deactivate Publisher
deactivate EventStore

MessageBus <- Subscriber : Read event
activate MessageBus #Lime
activate Subscriber #Lime
Subscriber -> BillingInbox : Push event
activate BillingInbox #Lime

BillingInbox -> Subscriber : Return success
deactivate BillingInbox
Subscriber -> MessageBus: Return success
deactivate Subscriber
deactivate MessageBus

BillingInbox <- BillingService : Read event
activate BillingInbox #Lime
activate BillingService #Lime
BillingService --> BillingService: Consume event
BillingService -> BillingInbox: Mark event\nas consumed
deactivate BillingService
deactivate BillingInbox
footer The break in the lifelines is there to denote that the entire sequence is made up multiple independent sub-sequences.\nEach sub-sequence is simple, easy to manage and independently scalable
@enduml